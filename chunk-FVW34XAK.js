import{N as s}from"./chunk-XN4KXQ72.js";var c=class extends Error{};c.prototype.name="InvalidTokenError";function l(r){return decodeURIComponent(atob(r).replace(/(.)/g,(t,n)=>{let e=n.charCodeAt(0).toString(16).toUpperCase();return e.length<2&&(e="0"+e),"%"+e}))}function d(r){let t=r.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw new Error("base64 string is not of the correct length")}try{return l(t)}catch{return atob(t)}}function a(r,t){if(typeof r!="string")throw new c("Invalid token specified: must be a string");t||(t={});let n=t.header===!0?0:1,e=r.split(".")[n];if(typeof e!="string")throw new c(`Invalid token specified: missing part #${n+1}`);let o;try{o=d(e)}catch(i){throw new c(`Invalid token specified: invalid base64 for part #${n+1} (${i.message})`)}try{return JSON.parse(o)}catch(i){throw new c(`Invalid token specified: invalid json for part #${n+1} (${i.message})`)}}var h=(()=>{let t=class t{constructor(){this.TOKEN_KEY="access token",this.CLIENT_KEY="client info",this.ADMIN_KEY="admin info"}setToken(e){localStorage.setItem(this.TOKEN_KEY,e)}getToken(){return localStorage.getItem(this.TOKEN_KEY)}logout(){localStorage.removeItem(this.TOKEN_KEY),localStorage.removeItem(this.CLIENT_KEY),localStorage.removeItem(this.ADMIN_KEY)}setClientInfo(e){localStorage.setItem(this.CLIENT_KEY,JSON.stringify(e))}setAdminInfo(e){localStorage.setItem(this.ADMIN_KEY,JSON.stringify(e))}getClientInfo(){let e=localStorage.getItem(this.CLIENT_KEY);return e?JSON.parse(e):null}getAdminInfo(){let e=localStorage.getItem(this.ADMIN_KEY);return e?JSON.parse(e):null}isLogged(){return!this.isTokenExpired()}isTokenExpired(){let e=this.getToken();if(!e)return!0;try{let o=a(e);console.log("Token decodificato in isTokenExpired: ",o);let i=Math.floor(Date.now()/1e3);return o.exp<i}catch(o){return console.error("Errore nella decodifica del token:",o),!0}}getClientInfoFromToken(e){try{if(!e)throw new Error("Token non fornito");let o=a(e);return console.log("Token decodificato: ",o),{idCliente:o.idCliente,nome:o.nome,cognome:o.cognome,email:o.email,role:o.role}}catch(o){throw console.error("Errore nella decodifica del token:",o),new Error("Impossibile estrarre le informazioni del cliente dal token")}}getAdminInfoFromToken(e){try{if(!e)throw new Error("Token non fornito");let o=a(e);return console.log("Token decodificato: ",o),{email:o.email,role:o.role}}catch(o){throw console.error("Errore nella decodifica del token:",o),new Error("Impossibile estrarre le informazioni dell'admin dal token")}}};t.\u0275fac=function(o){return new(o||t)},t.\u0275prov=s({token:t,factory:t.\u0275fac,providedIn:"root"});let r=t;return r})();export{h as a};
